name: Deploy to Amazon ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-west-1                     # Set this to your preferred AWS region
  ECR_REPOSITORY: hh_avr                    # Set this to your Amazon ECR repository name
  ECS_SERVICE: cluster_hh_avr               # Set this to your Amazon ECS service name
  ECS_CLUSTER: cluster_hh_avr               # Set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: task-definition.json # Set this to the path to your Amazon ECS task definition file
  CONTAINER_NAME_CLIENT: c_client
  CONTAINER_NAME_SERVER: c_server
  IMAGE_CLIENT_NAME: img_client
  IMAGE_SERVER_NAME: img_server

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push images to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        IMAGE_CLIENT: ${{ env.IMAGE_CLIENT_NAME }}
        IMAGE_SERVER: ${{ env.IMAGE_SERVER_NAME }}
      run: |
        docker compose -p $IMAGE_TAG build
        docker tag $IMAGE_CLIENT:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_CLIENT-$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_CLIENT-$IMAGE_TAG
        echo "imageclient=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_CLIENT-$IMAGE_TAG" >> $GITHUB_OUTPUT
        docker tag $IMAGE_SERVER:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SERVER-$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SERVER-$IMAGE_TAG
        echo "imageserver=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_SERVER-$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new client image ID in the Amazon ECS task definition
      id: task-def-client
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME_CLIENT }}
        image: ${{ steps.build-image.outputs.imageclient }}

    - name: Fill in the new server image ID in the Amazon ECS task definition
      id: task-def-server
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-client.outputs.task-definition }}
        container-name: ${{ env.CONTAINER_NAME_SERVER }}
        image: ${{ steps.build-image.outputs.imageserver }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def-server.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
